basePath: /gin-gonic/api/v1
definitions:
  main.DefaultError:
    type: object
  main.User:
    properties:
      data_criacao:
        type: string
      data_modificacao:
        type: string
      email:
        type: string
      id:
        type: integer
      nome:
        type: string
      senha:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: This is a sample server for a product and user API.
  title: Gin API Example
  version: "1.0"
paths:
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
      summary: Get all users
    post:
      parameters:
      - description: User to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.DefaultError'
      summary: Create a new user
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.DefaultError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.DefaultError'
      summary: Delete a user by ID
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.DefaultError'
      summary: Get a user by ID
    put:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.DefaultError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.DefaultError'
      summary: Update a user by ID
swagger: "2.0"
